?as.integer
mp_with_life_expectancy <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_life_expectancy.csv", ssl.verifypeer = FALSE)
dataLifeExp <- read.csv(text = mp_with_life_expectancy, skip = 1)
nomis_2014_11_16_150610 <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/nomis_2014_11_16_150610.csv", ssl.verifypeer = FALSE)
dataHealth <- read.csv2(text = nomis_2014_11_16_150610, header = T, skip = 8, nrows = 574)
mp_with_deaths_and_rates <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_deaths_and_rates.csv", ssl.verifypeer = FALSE)
dataDeaths <- read.csv(text = mp_with_deaths_and_rates, skip = 1)
ManMergedDataInfMort140806_url <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/ManMergedDataInfMort140806.csv", ssl.verifypeer = FALSE)
ManMergedDataInfMort140806_data <- read.csv2(text = ManMergedDataInfMort140806_url)
ManMergedDataInfMort140806_data[, 4:6] <- ManMergedDataInfMort140806_data[, 4:6]*1000 #Go to raw population sizes
dataDeaths <- merge(dataDeaths, ManMergedDataInfMort140806_data, by = c("population_total", "population_male", "population_female", "deaths_num_total", "deaths_num_male", "deaths_num_female", "deaths_num_infant", "deaths_num_neonatal", "deaths_rate_crude", "deaths_rate_agestd_total", "deaths_rate_agestd_male", "deaths_rate_agestd_female"))
length(unique(as.character(dataDeaths$name))) # Verify that merge operation succeeded without duplicates
dataDeaths$InfMort <- rowMeans(data.frame(dataDeaths$InfMort2010, dataDeaths$InfMort2011, dataDeaths$InfMort2012), na.rm = TRUE)
# Merge data
data_merged <- merge(dataDeaths, dataLifeExp, by = "constituency")
data_merged <- merge(data_merged, dataHealth, by.x = "constituency", by.y = "parliamentary.constituency.2010")
mp_with_life_expectancy <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_life_expectancy.csv", ssl.verifypeer = FALSE)
dataLifeExp <- read.csv(text = mp_with_life_expectancy, skip = 1)
nomis_2014_11_16_150610 <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/nomis_2014_11_16_150610.csv", ssl.verifypeer = FALSE)
dataHealth <- read.csv2(text = nomis_2014_11_16_150610, header = T, skip = 8, nrows = 574)
mp_with_deaths_and_rates <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_deaths_and_rates.csv", ssl.verifypeer = FALSE)
dataDeaths <- read.csv(text = mp_with_deaths_and_rates, skip = 1)
ManMergedDataInfMort140806_url <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/ManMergedDataInfMort140806.csv", ssl.verifypeer = FALSE)
ManMergedDataInfMort140806_data <- read.csv2(text = ManMergedDataInfMort140806_url)
ManMergedDataInfMort140806_data[, 4:6] <- ManMergedDataInfMort140806_data[, 4:6]*1000 #Go to raw population sizes
dataDeaths <- merge(dataDeaths, ManMergedDataInfMort140806_data, by = c("population_total", "population_male", "population_female", "deaths_num_total", "deaths_num_male", "deaths_num_female", "deaths_num_infant", "deaths_num_neonatal", "deaths_rate_crude", "deaths_rate_agestd_total", "deaths_rate_agestd_male", "deaths_rate_agestd_female"))
length(unique(as.character(dataDeaths$name))) # Verify that merge operation succeeded without duplicates
dataDeaths$InfMort <- rowMeans(data.frame(dataDeaths$InfMort2010, dataDeaths$InfMort2011, dataDeaths$InfMort2012), na.rm = TRUE)
# Merge data
data_merged <- merge(dataDeaths, dataLifeExp, by = "constituency")
data_merged <- merge(data_merged, dataHealth, by.x = "constituency", by.y = "parliamentary.constituency.2010")
hist(data_merged$deaths_rate_infant, main = "Infant mortality", xlab = "Deaths per 1000 births")
hist(data_merged$life_exp_birth_male_years, main = "Life expectancy, men", xlab = "Years")
hist(data_merged$life_exp_birth_female_years, main = "Life expectancy, women", xlab = "Years")
hist(data_merged$won.x, main = "Number of wins in sexymp.com ratings", xlab = "n")
summary(data_merged$won.x + data_merged$lost.x)
data_merged$SRH_score = (data_merged$Very.good.health*5 + data_merged$Good.health*4 + data_merged$Fair.health*3 + data_merged$Bad.health*2 + data_merged$Very.bad.health*1)/data_merged$All.categories..General.health
hist(data_merged$SRH_score)
hist(data_merged$SRH_score, main = "Self-rated health", xlab = "Mean rating for constituency")
data_merged$life_exp_birth <- (data_merged$life_exp_birth_male_years + data_merged$life_exp_birth_female_years)/2
plot(life_exp_birth ~ deaths_rate_infant, data = data_merged)
cor.test(data_merged$life_exp_birth, data_merged$deaths_rate_infant)
plot(life_exp_birth ~ InfMort, data = data_merged)
cor.test(data_merged$life_exp_birth, data_merged$InfMort)
data_merged$Score <- data_merged$won.x/(data_merged$won.x + data_merged$lost.x)
lm_party <- lm(Score ~ party.x + gender.x, data = data_merged)
plot(lm_party$residuals ~ data_merged$deaths_rate_infant,
xlab = "Infant Mortality (per 1000 live births)", ylab = "sexymp.co.uk score, residual")
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$deaths_rate_infant[data_merged$gender.x == "F"], pch = 16)
plot(lm_party2$residuals ~ data_merged2$InfMort,
xlab = "Infant Mortality (per 1000 live births)", ylab = "sexymp.co.uk score, residual")
points(lm_party2$residuals[data_merged2$gender.x == "F"] ~ data_merged2$InfMort[data_merged2$gender.x == "F"], pch = 16)
lm_inf2 <- lm(lm_party2$residuals ~ data_merged2$InfMort)
lines(c(min(data_merged2$InfMort, na.rm = T), max(data_merged2$InfMort, na.rm = T)), c(min(predict(lm_inf2)), max(predict(lm_inf2))), col = "red")
lines(loess.smooth(data_merged2$InfMort, lm_party2$residuals), col = "blue", na.rm = T)
lm_inf3 <- lm(lm_party2$residuals ~ data_merged2$InfMort + data_merged2$party.x + data_merged2$gender.x)
summary(lm_inf3)
confint(lm_inf3, )
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant Mortality (per 1000 live births)", ylab = "sexymp.co.uk score, residual")
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(min(predict(lm_inf)), max(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue", na.rm = T)
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant Mortality (per 1000 live births)", ylab = "sexymp.co.uk score, residual")
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(min(predict(lm_inf)), max(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
summary(lm_party)
lm_inf2 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged)
summary(lm_inf2)
summary(lm_inf)
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant Mortality (per 1000 live births)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
lm_inf2 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged)
summary(lm_inf2)
confint(lm_inf2, )
plot(lm_party$residuals ~ data_merged$life_exp_birth,
xlab = "Life Expectancy at Birth (years)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$life_exp_birth[data_merged$gender.x == "F"], pch = 16)
lm_life <- lm(lm_party$residuals ~ data_merged$life_exp_birth)
lines(c(min(data_merged$life_exp_birth), max(data_merged$life_exp_birth)), c(min(predict(lm_life)), max(predict(lm_life))), col = "red")
plot(lm_party$residuals ~ data_merged$life_exp_birth,
xlab = "Life Expectancy at Birth (years)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$life_exp_birth[data_merged$gender.x == "F"], pch = 16)
lm_life <- lm(lm_party$residuals ~ data_merged$life_exp_birth)
lines(c(min(data_merged$life_exp_birth), max(data_merged$life_exp_birth)), c(max(predict(lm_life)), min(predict(lm_life))), col = "red")
lines(loess.smooth(data_merged$life_exp_birth, lm_party$residuals), col = "blue")
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$SRH_score[data_merged$gender.x == "F"], pch = 16)
lm_SRH <- lm(lm_party$residuals ~ data_merged$SRH_score)
lines(c(min(data_merged$SRH_score), max(data_merged$SRH_score)), c(min(predict(lm_SRH)), max(predict(lm_SRH))), col = "red")
lines(loess.smooth(data_merged$SRH_score, lm_party$residuals), col = "blue")
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
lm_inf2 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged)
summary(lm_inf2)
confint(lm_inf2, )
plot(lm_party$residuals ~ data_merged$life_exp_birth,
xlab = "Life Expectancy at Birth (years)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$life_exp_birth[data_merged$gender.x == "F"], pch = 16)
lm_life <- lm(lm_party$residuals ~ data_merged$life_exp_birth)
lines(c(min(data_merged$life_exp_birth), max(data_merged$life_exp_birth)), c(max(predict(lm_life)), min(predict(lm_life))), col = "red")
lines(loess.smooth(data_merged$life_exp_birth, lm_party$residuals), col = "blue")
lm_life2 <- lm(lm_party$residuals ~ data_merged$life_exp_birth + data_merged$party.x + data_merged$gender.x)
summary(lm_life2)
confint(lm_life2, )
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$SRH_score[data_merged$gender.x == "F"], pch = 16)
lm_SRH <- lm(lm_party$residuals ~ data_merged$SRH_score)
lines(c(min(data_merged$SRH_score), max(data_merged$SRH_score)), c(min(predict(lm_SRH)), max(predict(lm_SRH))), col = "red")
lines(loess.smooth(data_merged$SRH_score, lm_party$residuals), col = "blue")
lm_SRH2 <- lm(lm_party$residuals ~ data_merged$SRH_score + data_merged$party.x + data_merged$gender.x)
summary(lm_SRH2)
confint(lm_SRH2, )
mar
par(mar=c(5.1, 4.1, 2, 0) # Set margins for plotting
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
par(mar = c(5.1, 4.1, 2, 0)) # Set margins for plotting
# First infant  mortality
plot(lm_party$residuals ~ data_merged$InfMort,
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
par("mar")
par(mar = c(5.1, 4.1, 0, 0)) # Set margins for plotting
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
par(mar = c(5.1, 4.1, 2, 0)) # Set margins for plotting
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
# Then life expectancy
plot(lm_party$residuals ~ data_merged$life_exp_birth,
xlab = "Life Expectancy at Birth (years)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$life_exp_birth[data_merged$gender.x == "F"], pch = 16)
lm_life <- lm(lm_party$residuals ~ data_merged$life_exp_birth)
lines(c(min(data_merged$life_exp_birth), max(data_merged$life_exp_birth)), c(max(predict(lm_life)), min(predict(lm_life))), col = "red")
lines(loess.smooth(data_merged$life_exp_birth, lm_party$residuals), col = "blue")
lm_life2 <- lm(lm_party$residuals ~ data_merged$life_exp_birth + data_merged$party.x + data_merged$gender.x)
summary(lm_life2)
confint(lm_life2, )
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$SRH_score[data_merged$gender.x == "F"], pch = 16)
lm_SRH <- lm(lm_party$residuals ~ data_merged$SRH_score)
lines(c(min(data_merged$SRH_score), max(data_merged$SRH_score)), c(min(predict(lm_SRH)), max(predict(lm_SRH))), col = "red")
lines(loess.smooth(data_merged$SRH_score, lm_party$residuals), col = "blue")
View(data_merged)
summary(data_merged$population_total)
View(dataDeaths)
lm_inf2 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged)
summary(lm_inf2)
confint(lm_inf2, )
lm_life2 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged)summary(lm_life2)
lm_life2 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged)summary(lm_life2)
lm_life2 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged)
summary(lm_life2)
confint(lm_life2, )
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$SRH_score[data_merged$gender.x == "F"], pch = 16)
lm_SRH <- lm(lm_party$residuals ~ data_merged$SRH_score)
lines(c(min(data_merged$SRH_score), max(data_merged$SRH_score)), c(min(predict(lm_SRH)), max(predict(lm_SRH))), col = "red")
lines(loess.smooth(data_merged$SRH_score, lm_party$residuals), col = "blue")
lm_life2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged)
summary(lm_SRH2)
confint(lm_SRH2, )
lm_SRH2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged)
summary(lm_SRH2)
confint(lm_SRH2, )
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$deaths_rate_infant > mean(data_merged$deaths_rate_infant)+sd(data_merged$deaths_rate_infant)])
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$deaths_rate_infant > mean(data_merged$deaths_rate_infant)+sd(data_merged$deaths_rate_infant), ])
summary(lm_inf3)
confint(lm_inf3, )
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$InfMort > mean(data_merged$InfMort)+sd(data_merged$InfMort), ])
summary(lm_inf3)
confint(lm_inf3, )
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$InfMort > mean(data_merged$InfMort)+sd(data_merged$InfMort), ])
data_merged[data_merged$InfMort > mean(data_merged$InfMort)+sd(data_merged$InfMort), ]
sd(data_merged$InfMort)
str(data_merged$InfMort)
data_merged$InfMort
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$InfMort > mean(data_merged$InfMort, na.rm = T)+sd(data_merged$InfMort, na.rm = T), ])
summary(lm_inf3)
confint(lm_inf3, )
lm_life3 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged[data_merged$life_exp_birth > mean(data_merged$life_exp_birth)+sd(data_merged$life_exp_birth), ])
summary(lm_life3)
confint(lm_life3, )
lm_SRH2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged[data_merged$SRH_score > mean(data_merged$SRH_score)+sd(data_merged$SRH_score), ])
summary(lm_SRH2)
confint(lm_SRH2, )
lm_life3 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged[data_merged$life_exp_birth < mean(data_merged$life_exp_birth)+sd(data_merged$life_exp_birth), ])
summary(lm_life3)
confint(lm_life3, )
lm_life3 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged[data_merged$life_exp_birth < mean(data_merged$life_exp_birth) - sd(data_merged$life_exp_birth), ])
summary(lm_life3)
confint(lm_life3, )
lm_SRH2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged[data_merged$SRH_score < mean(data_merged$SRH_score) - sd(data_merged$SRH_score), ])
summary(lm_SRH2)
confint(lm_SRH2, )
# Script to analyse disease burden and MP sexiness
# Require packages
library(RCurl) # To read data from GitHub
# Read data
mp_with_life_expectancy <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_life_expectancy.csv", ssl.verifypeer = FALSE)
dataLifeExp <- read.csv(text = mp_with_life_expectancy, skip = 1)
nomis_2014_11_16_150610 <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/nomis_2014_11_16_150610.csv", ssl.verifypeer = FALSE)
dataHealth <- read.csv2(text = nomis_2014_11_16_150610, header = T, skip = 8, nrows = 574)
mp_with_deaths_and_rates <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/data/processed/mp_with_deaths_and_rates.csv", ssl.verifypeer = FALSE)
dataDeaths <- read.csv(text = mp_with_deaths_and_rates, skip = 1)
ManMergedDataInfMort140806_url <- getURL("https://raw.githubusercontent.com/tgwizard/sexymp-data/master/ManMergedDataInfMort140806.csv", ssl.verifypeer = FALSE)
ManMergedDataInfMort140806_data <- read.csv2(text = ManMergedDataInfMort140806_url)
ManMergedDataInfMort140806_data[, 4:6] <- ManMergedDataInfMort140806_data[, 4:6]*1000 #Go to raw population sizes
dataDeaths <- merge(dataDeaths, ManMergedDataInfMort140806_data, by = c("population_total", "population_male", "population_female", "deaths_num_total", "deaths_num_male", "deaths_num_female", "deaths_num_infant", "deaths_num_neonatal", "deaths_rate_crude", "deaths_rate_agestd_total", "deaths_rate_agestd_male", "deaths_rate_agestd_female"))
length(unique(as.character(dataDeaths$name))) # Verify that merge operation succeeded without duplicates
dataDeaths$InfMort <- rowMeans(data.frame(dataDeaths$InfMort2010, dataDeaths$InfMort2011, dataDeaths$InfMort2012), na.rm = TRUE)
# Merge data
data_merged <- merge(dataDeaths, dataLifeExp, by = "constituency")
data_merged <- merge(data_merged, dataHealth, by.x = "constituency", by.y = "parliamentary.constituency.2010")
# Inspect distributions of variables
hist(data_merged$deaths_rate_infant, main = "Infant mortality", xlab = "Deaths per 1000 births")
hist(data_merged$life_exp_birth_male_years, main = "Life expectancy, men", xlab = "Years")
hist(data_merged$life_exp_birth_female_years, main = "Life expectancy, women", xlab = "Years")
hist(data_merged$won.x, main = "Number of wins in sexymp.com ratings", xlab = "n")
summary(data_merged$won.x + data_merged$lost.x)
# Generate new variables for analysis and inspect their distributions
#data_merged$deaths_rate_infant_zscore <- scale(data_merged$deaths_rate_infant)
#hist(data_merged$deaths_rate_infant_zscore, main = "Infant mortality", xlab = "z-score")
data_merged$SRH_score = (data_merged$Very.good.health*5 + data_merged$Good.health*4 + data_merged$Fair.health*3 + data_merged$Bad.health*2 + data_merged$Very.bad.health*1)/data_merged$All.categories..General.health
hist(data_merged$SRH_score, main = "Self-rated health", xlab = "Mean rating for constituency")
data_merged$life_exp_birth <- (data_merged$life_exp_birth_male_years + data_merged$life_exp_birth_female_years)/2
# Check whether life expectancy and infant mortality are correlated
plot(life_exp_birth ~ InfMort, data = data_merged)
cor.test(data_merged$life_exp_birth, data_merged$InfMort)
# Create a score based on fraction of wins
data_merged$Score <- data_merged$won.x/(data_merged$won.x + data_merged$lost.x)
# Perform analyses (export plots manually to pdf from RStudio at 6x6 inches)
# For purposes of plotting, create a null model with party and sex as predictors
lm_party <- lm(Score ~ party.x + gender.x, data = data_merged)
par(mar = c(5.1, 4.1, 2, 0)) # Set margins for plotting
# First infant  mortality
plot(lm_party$residuals ~ data_merged$InfMort,
xlab = "Infant mortality per 1000 live births", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$InfMort[data_merged$gender.x == "F"], pch = 16)
lm_inf <- lm(lm_party$residuals ~ data_merged$InfMort)
lines(c(min(data_merged$InfMort, na.rm = T), max(data_merged$InfMort, na.rm = T)), c(max(predict(lm_inf)), min(predict(lm_inf))), col = "red")
lines(loess.smooth(data_merged$InfMort, lm_party$residuals), col = "blue")
lm_inf2 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged)
summary(lm_inf2)
confint(lm_inf2, )
# Then life expectancy
plot(lm_party$residuals ~ data_merged$life_exp_birth,
xlab = "Life Expectancy at Birth (years)", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$life_exp_birth[data_merged$gender.x == "F"], pch = 16)
lm_life <- lm(lm_party$residuals ~ data_merged$life_exp_birth)
lines(c(min(data_merged$life_exp_birth), max(data_merged$life_exp_birth)), c(max(predict(lm_life)), min(predict(lm_life))), col = "red")
lines(loess.smooth(data_merged$life_exp_birth, lm_party$residuals), col = "blue")
lm_life2 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged)
summary(lm_life2)
confint(lm_life2, )
# Then self-rated health
plot(lm_party$residuals ~ data_merged$SRH_score,
xlab = "Self-Rated Health", ylab = "sexymp.co.uk score, residual", frame.plot = F)
points(lm_party$residuals[data_merged$gender.x == "F"] ~ data_merged$SRH_score[data_merged$gender.x == "F"], pch = 16)
lm_SRH <- lm(lm_party$residuals ~ data_merged$SRH_score)
lines(c(min(data_merged$SRH_score), max(data_merged$SRH_score)), c(min(predict(lm_SRH)), max(predict(lm_SRH))), col = "red")
lines(loess.smooth(data_merged$SRH_score, lm_party$residuals), col = "blue")
lm_SRH2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged)
summary(lm_SRH2)
confint(lm_SRH2, )
# Analyse lowest-health constituencies separately, following White et al. 2013
lm_inf3 <- lm(Score ~ InfMort + party.x + gender.x, data = data_merged[data_merged$InfMort > mean(data_merged$InfMort, na.rm = T) + sd(data_merged$InfMort, na.rm = T), ])
summary(lm_inf3)
confint(lm_inf3, )
lm_life3 <- lm(Score ~ life_exp_birth + party.x + gender.x, data = data_merged[data_merged$life_exp_birth < mean(data_merged$life_exp_birth) - sd(data_merged$life_exp_birth), ])
summary(lm_life3)
confint(lm_life3, )
lm_SRH2 <- lm(Score ~ SRH_score + party.x + gender.x, data = data_merged[data_merged$SRH_score < mean(data_merged$SRH_score) - sd(data_merged$SRH_score), ])
summary(lm_SRH2)
confint(lm_SRH2, )
View(data_merged)
View(dataDeaths)
rbinom(100, 10)
rbinom(100, 100, 0.5)
rbinom(100, 10, 0.5)
hist(data_merged$deaths_num_infant/data_merged$deaths_rate_infant)
data_merged$births <- (data_merged$deaths_num_infant/data_merged$deaths_rate_infant)*1000
plot(data_merged$births ~ data_merged$population_total)
rbinom(data_merged$births, 1, 0.045)
rbinom(1, data_merged$births, 0.045)
for(i in 1:length(data_merged$births)){
rbinom(1, data_merged$births[i], 0.045)
}
warnings()
rbinom(1, data_merged$births[1], 0.045)
rbinom(data_merged$births[1], 1, 0.045)
rbinom(10, data_merged$births[1], 0.045)
rbinom(1, 1000, 0.1)
rbinom(1, 1000, 0.045)
data_merged$births[1]
data_merged$births <- round((data_merged$deaths_num_infant/data_merged$deaths_rate_infant)*1000, 0)
data_merged$births
rbinom(10, data_merged$births[1], 0.045)
mean(data_merged$deaths_rate_infant)
meanInfMortRate <- mean(data_merged$deaths_rate_infant)
meanInfMortRate <- mean(data_merged$deaths_rate_infant)/1000
rbinom(100, data_merged$births[1], meanInfMortRate)
fun_simDeaths <- function(x){
deaths <- rbinom(1000, x, meanInfMortRate)
return(deaths)
}
data_merged$population_total[1]
fun_sinDeaths(data_merged$population_total[1])
fun_simDeaths(data_merged$population_total[1])
fun_simDeaths(data_merged$births[1])
fun_simDeaths(data_merged$births[1:2])
apply(data_merged$births[1:2], 2, fun_simDeaths)
fun_simDeaths <- function(x){
deaths <- rbinom(100, x, meanInfMortRate)
return(deaths)
}
apply(data_merged$births[1:2], 1, fun_simDeaths)
?apply
lapply(data_merged$births[1:2], fun_simDeaths)
test <- lapply(data_merged$births, fun_simDeaths)
warnings()
plot(density(unlist(test)))
?density
plot(density(unlist(test), na.rm = T))
fun_simDeaths <- function(x){
deaths <- rbinom(100, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
fun_simDeaths <- function(x){
deaths <- rbinom(1000, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
fun_simDeaths <- function(x){
deaths <- rbinom(1000, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
fun_simDeaths <- function(x){
deaths <- rbinom(10000, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
density(data_merged$deaths_rate_infant, na.rm = T)
lines(density(data_merged$deaths_rate_infant, na.rm = T), col = "red")
plot(density(data_merged$deaths_rate_infant, na.rm = T), col = "red")
plot(density(unlist(test), na.rm = T))
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
fun_simDeaths <- function(x){
deaths <- rbinom(100, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
test <- lapply(data_merged$births, fun_simDeaths)
plot(density(unlist(test), na.rm = T))
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(density(unlist(test), na.rm = T))
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
plot(density(unlist(test), na.rm = T), frame.plot = F, main = "")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
plot(density(unlist(test), na.rm = T), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
par(mar=c(5.1, 4.1, 4.1, 0))
plot(density(unlist(test), na.rm = T), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
par(mar=c(5.1, 4.1, 0, 2.1))
plot(density(unlist(test), na.rm = T), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
var(unlist(test))
var(unlist(test), na.rm = T)
var(data_merged$deaths_rate_infant/1000)
var(data_merged$deaths_rate_infant/1000)/var(unlist(test), na.rm = T)
var(unlist(test), na.rm = T)*1000
var(data_merged$deaths_rate_infant)
var(unlist(test)*1000, na.rm = T)
var(data_merged$deaths_rate_infant)
fun_simDeaths <- function(x){
deaths <- rbinom(1000, x, meanInfMortRate)
deathRate <- deaths/x
return(deathRate)
}
DeathRatesOneYear <- lapply(data_merged$births, fun_simDeaths)
?density
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(density(unlist(DeathRatesOneYear), na.rm = T), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 1), frame.plot = F, main = "", xlab = "Infant mortality")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.5), frame.plot = F, main = "", xlab = "Infant mortality")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.1), frame.plot = F, main = "", xlab = "Infant mortality")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.001), frame.plot = F, main = "", xlab = "Infant mortality")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0001), frame.plot = F, main = "", xlab = "Infant mortality")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.001), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant/1000, na.rm = T), col = "red")
lines(density(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, main = "", xlab = "Infant mortality")
lines(density(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, main = "", xlab = "Infant mortality", xlim = c(0, 0.012))
lines(density(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, main = "", xlab = "Infant mortality", xlim = c(0, 0.012))
legend("topright", lty = 1, legend = c("Simulated", "Observed"), col = c("black", "red"))
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, main = "", xlab = "Infant mortality", xlim = c(0, 0.012), main = "Data from one year (2011)")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, xlab = "Infant mortality", xlim = c(0, 0.012), main = "Data from one year (2011)")
legend("topright", lty = 1, legend = c("Simulated", "Observed"), col = c("black", "red"), bty = "n")
lines(density(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000, na.rm = T), col = "red")
var(unlist(DeathRatesOneYear)*1000, na.rm = T)
var(data_merged$deaths_rate_infant)
var(data_merged$deaths_rate_infant/1000)/var(unlist(DeathRatesOneYear), na.rm = T)
var(unlist(DeathRatesOneYear)*1000, na.rm = T)
var(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0])
var(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000)/var(unlist(DeathRatesOneYear), na.rm = T)
x <- 10
deaths1 <- rbinom(1000, x, meanInfMortRate)
deaths2 <- rbinom(1000, x, meanInfMortRate)
deaths3 <- rbinom(1000, x, meanInfMortRate)
deaths <- cbind(deaths1, deaths2, deaths3)
View(deaths)
str(deaths)
deaths <- matrix(deaths1, deaths2, deaths3)
deaths <- as.matrix(deaths1, deaths2, deaths3)
View(deaths)
deaths <- data.frame(deaths1, deaths2, deaths3)
View(deaths)
deaths$meanDeaths <- rowMeans(deaths)
View(deaths)
fun_simDeaths3 <- function(x){
deaths1 <- rbinom(1000, x, meanInfMortRate)
deaths2 <- rbinom(1000, x, meanInfMortRate)
deaths3 <- rbinom(1000, x, meanInfMortRate)
deaths <- data.frame(deaths1, deaths2, deaths3)
deaths$meanDeaths <- round(rowMeans(deaths, na.rm = T), 0)
deathRate <- deaths$meanDeaths/x
return(deathRate)
}
DeathRates3Years <- lapply(data_merged$births, fun_simDeaths3)
plot(density(unlist(DeathRates3Years), na.rm = T, bw = 0.0005), frame.plot = F, xlab = "Infant mortality", xlim = c(0, 0.012), main = "Data from 3 years (2010-2012)")
plot(density(unlist(DeathRates3Years), na.rm = T, bw = 0.0005), frame.plot = F, xlab = "Infant mortality", xlim = c(0, 0.012), main = "Data from 3 years (2010-2012)")
legend("topright", lty = 1, legend = c("Simulated", "Observed"), col = c("black", "red"), bty = "n")
lines(density(data_merged$InfMort[data_merged$InfMort != 0]/1000, na.rm = T), col = "red")
plot(density(unlist(DeathRatesOneYear), na.rm = T, bw = 0.0005), frame.plot = F, xlab = "Infant mortality", xlim = c(0, 0.012), main = "Data from one year (2011)")
legend("topright", lty = 1, legend = c("Simulated", "Observed"), col = c("black", "red"), bty = "n")
lines(density(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0]/1000, na.rm = T), col = "red")
var(unlist(DeathRatesOneYear)*1000, na.rm = T)
var(data_merged$deaths_rate_infant[data_merged$deaths_rate_infant != 0])
var(unlist(DeathRates3Years)*1000, na.rm = T)
var(data_merged$InfMort[data_merged$InfMort != 0])
var(data_merged$InfMort[data_merged$InfMort != 0])
var(data_merged$InfMort[data_merged$InfMort != 0]/1000)/var(unlist(DeathRates3Years), na.rm = T)
data_merged$InfMort
data_merged$InfMort[data_merged$InfMort != 0]
str(data_merged$InfMort[data_merged$InfMort != 0])
var(data_merged$InfMort[data_merged$InfMort != NaN])
data_merged$InfMort[data_merged$InfMort != NaN]
data_merged$InfMort
var(data_merged$InfMort)
var(data_merged$InfMort, na.rm = T)
var(unlist(DeathRates3Years)*1000, na.rm = T)
var(data_merged$InfMort, na.rm = T)
